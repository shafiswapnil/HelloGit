LESSON 01 [what is git and why]
-----------------------------------------------------------------
1 commit - record the local works
2 push - push files to the server
3 pull - pulling files into my machine form the server

1 status - project status
2 add - add file
3 diff
4 log - get log about commits
5 show
6 reset
7 branch
8 merge
9 stash - revert what you have done


LESSON 02 [init, commit, diff, log]
-----------------------------------------------------------------
to start, use:
	git init

to add file, use:
	git add <filename>

to add one or more files together:
	git add .

to see status, use:
	git status

to commit, use:
	git commit -m "what you've done"

to see difference after modification, use:
	git diff

now to commit again, use:
	git commit -m "comment" <filename.ext>

to commit two files at once, use:
	git commit -m "comment" <file1> <file2>
	git commit -am "comment"

to view the log of commits you've made
	git log

to view what you've done on a particular commit
	git show 144a2baf


LESSON 03 [go back to prev commit, reset, amend]
-----------------------------------------------------------------

======= CHECKOUT =======

to completely go to a particular commit,
	git checkout cf0000

		you'll see the only file/changes what was made on cf0000
			cat <filename>
			ls
		to return back to master branch,
			git checkout master

to view current branch
	git branch

to view a files log
	git log <filename>

to see only a file in commit state
	git checkout bd616a <filename>

		to return back to master,
			git checkout master -f

======= RESET =======

to undo a accidental commit, you can reset them to previous commit
	reset works in two ways. (1) soft reset (2) hard reset

		(1) reset --soft
			if you want go to previous commit, then remove the accidental commit.
			SOFT RESET WILL RESET TO ITS PREVIOUS, BUT WILL KEEP THE LINES WHOM ARE ACCIDENTAL
				git reset --soft 171abcd		[171abcd is the previous good]

			to see what's been reverted,
				git diff HEAD

		(2) reset --hard
			git reset --hard 2e8af

			THE ACCIDENTAL COMMIT WILL BE NOW COMLETELY DISAPPEARED.

to see what we've done so far
	git reflog

return back to good going commit
	| git reflog
	| git reset HEAD@{1}
	| git reset --hard

WARNING
1 Don't reset if you have push(ed)/publish(ed) any file.
2 Reset only those file whom are not push(ed).
3 Use revert in situation of push/publish.

======= AMEND =======

assume that, we have commited a file. but after that you remember that you have to edit some more on that commit, then you can use {git commit --amend}

we use amend to bind new edits of file to previous commit
	git vi text2.txt
	git add text2.txt
	git log [assume that last commit hash was 8d5f9]
	git commit --amend
	git log [commit 8d5f9cd will get a new hash now]
	git show <new hash>


LESSON 4 [git stash and clean]
-----------------------------------------------------------------

======= STASH =======

to save an experimental work in git (meaning, excluding git commit or delete)
	git stash
	cat script.js

to apply latest saved stash into file, then
	git stash pop/apply

to see saved stash list,
	git stash list

to apply stash from the list then,
	git stash pop stash@{1}

now let's commit the latest file,
	git commit -am "smart summation using math reduce"

if you want to clear the list of git stash, then,
	git stash clear

======= CRUSH COURSE =======

	echo "another file created by echo" > another.txt

======= GIT CLEAN =======

Situation > think of two files named '1.txt' and '2.txt' are untracked in working directory. and you need to remove those file from working directory. so rather deleting those files separately, we can do something like,
	git clean -f 		[risky!]

	BUT HEY THERE WAIT!!
	git clean -f is risky. because it will delete all those file whom are untracked. so you can just dry run this command by,
		git clean -f -n
	this will show those file whom are going to be deleted.

	after dry run, now you can clean!


LESSON 05 [git remote,push and pull]
-----------------------------------------------------------------

pull - pulls the latest working directory into local
push - push codes to the internet
remote - where we actually push codes to the internet, that is called remote. it's not nessesary to think that we have to host our codes to internet, rather we can host them in intranet also.

To start using git remote, you can do it in an exsisting file or on a new file.

To start a new project, all you have to do is to run,
	git clone git@github.com:shafiswapnil/gittest.git <folderName>

Or on an exsisting project, you will have to,
	git remote add origin git@github.com:shafiswapnil/gittest.git
	| Here I named my GitHub remote by 'origin'. You can name it anything. But 'origin' is mostly used.

To view all remotes added in a project, you can run
	git remote show

To view remote url then,
	git remote show origin

To Push code to the server, you have to run
	git push origin master

To Pull code from server, you have to run
	git pull origin master

In case if the name of the repo has been changed, then you have to rename git remote:
	git remote -v
	git remote set-url origin <newUrl>


LESSON 06 [gitignore file]
-----------------------------------------------------------------

.gitignore file

Benefits of .gitignore file
	> the file name or extensions you specify in this file, those won't be uploaded to git remote.
	> also, git clean -f won't clear those specified files


LESSON 07 [fixing conflicts]
-----------------------------------------------------------------

If a situation occurs, where there is different two or more branch, working in a same file, even in the same line, a conflict occurs in between them when merging with another branch.
Let's say we want to merge 'junk' branch with 'master'. And there's a file named 'conflict_fixing.txt'. In that file, in line 2 = master added some texts and also junk added some text.
So, when we will be merging them, there will be a conflict.
Let's see the commands:
	[master]
	code conflict_fixing.txt
	git add .
	git commit -m "version 1 [master]" conflict_fixing.txt

	[junk]
	code conflict_fixing.txt
	git commit -m "version 1 [junk]" conflict_fixing.txt

	[LET'S MERGE!]
	git checkout master
	[master] git merge junk
	[master] git commit -m "conflict fixed" conflict_fixing.txt 

	Here when you will use `[master] git merge junk` then git will show a message to resolve the conflict. If you'll closely you will understand what to do!


LESSON # [branch] [LOCAL]
-----------------------------------------------------------------

to view branch list:
	git branch

to switch branch:
	git checkout <branch_name>

to create new branch:
	git checkout -b <branch_name>

merge from one branch to another:
	git merge <branch_name>

to delete a branch:
	git branch -d <branch_name>

	IN ACTION:
	git checkout -b deleteme
	git checkout master
	git branch -d deleteme


LESSON # [branch] [REMOTE]
-----------------------------------------------------------------

to get all the branches that are online, but git pull isn't working, then use:
	git fetch

to view all the branches:
	git branch -a

if a branch was created in remote then, it'll ask for pushing the lateset commit to the remote also (which doesn't work in local). use:
	git push

if any file was edited in remote (in other branch), you'll have to pull those changes in your machine by using:
	git pull origin <branch_name>

to delete a branch from remote, working while in local, you need to do these things:
	# you're recommanded to pull the branch from remote first
	git pull
	git branch -a
	git checkout <branch_name>
	git checkout master
	git branch -d <branch_name>
	git push origin :<branch_name>

	EXAMPLE:
	git checkout deleteme
	git checkout master
	git branch -d deleteme
	git push origin :deleteme

to push a local branch to remote:
	git push origin <branch_name>


LESSON # [tag]
-----------------------------------------------------------------

REF: https://www.youtube.com/watch?v=govmXpDGLpo
Tagging in Git or any other VCS refers to creating specific points in history for your repository/data.
This is usually done to mark release points

When to create TAGs
	1. When you want to create a release point for a stable version of your code
	2. When you want to create historic point for your code/data that you can refer a any future time (to restore your data)

An annotated tag
	git tag -a v1.0 -m "ver 1 of .."
	Annotated tags are stored as full objects in the Git database. To reiterate, They store extra meta data such as: the tagger name, email, and date. Similar to commits and commit messages Annotated tags have a tagging message.

(( BTW, TAGS DON'T COVER ALL THE COMMIT, IT ONLY MARKS THE LATEST COMMIT. ))

to CREATE a git tag:
	git tag <name of the tag>

DISPLAY or SHOW tag:
	git tag
	git show v1.0
	git tag -l "v1.*"

PUSH tags to remote:
	git push origin <tag-name>

	**for pushing all the tags:
	git push origin --tags
	git push --tags

DELETE TAGS (if required only)
	**** to delete tags from LOCAL
	git tag -d v1.0
	git tag --delete v1.0

	**** to delete tags from REMOTE
	git push origin -d v1.0
	git push origin --delete v1.0
	git push origin :v1.0

	**** to delete multiple tags at once:
	git tag -d v1.0 v1.1
	git push origin -d v1.0 v1.1

How to checkout TAGs (when required)
	- We cannot checkout tags in git
	- we can create branch from a tag and checkout the branch
	SYNTAX: git checkout -b <branch name> <tag name>
	EXAMPLE: git checkout -b ReleaseVer1 v1.0

Can I create a tag from some past commtit?
	Yes.
	SYNTAX: git tag <tag name> <commit reference>
	EXAMPLE: git tag v1.2 784508

to change the git tag from a particular commit to another commit, then:
	git tag -f stable <new_commit_hash>

and push the force tag change to remote:
	git push --force origin stable


LESSON # [Create Release]
-----------------------------------------------------------------

firstly go to your GitHub then get into the working repository. Now point out the 'Releases' tab on the repo. Go there and click on 'Tags' Button. Find the tag you want to work with. And look left, you'll find more options there. Click 'Create Release'. Now you'll know what to do! 🥂


LESSON # [Compare between branch with pull request]
-----------------------------------------------------------------

Go to GitHub and open your repository, click New Pull Request and select/write options for 'base' and 'compare'. You'll see what to merge, blame, and stuffs.


LESSON # [Compare commit]
-----------------------------------------------------------------

First of all you'll have to choose a commit which you need to compare. After choosing commit, copy the commit hash and go to Pull Request tab and paste the commit hash to 'compare' and select a base. You'll see what you see. That's all.


LESSON # [Compare tags]
-----------------------------------------------------------------

Same as before, go to Pull Request tab and select 'base', 'compare' with your prefered tags. And you know, you'll see what you see. ;)


LESSON # [Advanced comparison]
-----------------------------------------------------------------

In general, selecting/writting options for 'base' and 'compare' shows the difference/Comparing Changes. But we can modify the options for 'base' and 'compare' a little bit for more info on changes.
For example, if we want to see what happend to a branch called 'dev' one day before, we can write dev@{1day} in compare section. and in base section select master.
You'll know what's happening.

